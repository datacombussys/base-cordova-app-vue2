# Generated by Django 3.0.7 on 2021-02-12 20:11

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('date_added', models.DateField(auto_now_add=True, verbose_name='date added')),
                ('group_type', models.CharField(blank=True, max_length=100, null=True)),
                ('group_class', models.CharField(blank=True, max_length=100, null=True)),
            ],
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('permission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Permission')),
                ('date_added', models.DateField(auto_now_add=True, verbose_name='date joined')),
                ('permission_category', models.CharField(blank=True, max_length=100, null=True)),
            ],
            bases=('auth.permission',),
            managers=[
                ('objects', django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(max_length=60, unique=True, verbose_name='email')),
                ('username', models.CharField(blank=True, max_length=30, null=True, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('global_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('is_admin', models.BooleanField(blank=True, default=False, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True, null=True)),
                ('is_staff', models.BooleanField(blank=True, default=False, null=True)),
                ('is_superuser', models.BooleanField(blank=True, default=False, null=True)),
                ('full_name', models.CharField(blank=True, max_length=200, null=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('mobile_phone', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('^\\d{1,10}$')])),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('address2', models.CharField(blank=True, max_length=200, null=True)),
                ('city', models.CharField(blank=True, max_length=200, null=True)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator('^\\d{1,5}$')])),
                ('country', models.CharField(blank=True, max_length=200, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('pin', models.CharField(blank=True, max_length=250, null=True, validators=[django.core.validators.RegexValidator('^\\d{1,4}$')])),
                ('fax', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('^\\d{1,10}$')])),
                ('groups', models.ManyToManyField(blank=True, related_name='user_groups', to='auth.Group')),
            ],
            options={
                'ordering': ['id', 'last_name', 'first_name', 'date_added'],
            },
        ),
    ]
